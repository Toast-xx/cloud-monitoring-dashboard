{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\cloud-monitoring-dashboard\\\\frontend\\\\src\\\\CloudMetric.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { getCloudMetrics, loginGoogle, loginAWS } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CloudMetric = ({\n  title,\n  cloudService\n}) => {\n  _s();\n  const [metricData, setMetricData] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchMetrics = async () => {\n      try {\n        if (!accessToken) {\n          if (cloudService === 'google') {\n            loginGoogle();\n          } else if (cloudService === 'aws') {\n            const awsToken = await loginAWS('your-username', 'your-password');\n            setAccessToken(awsToken);\n          }\n        } else {\n          const data = await getCloudMetrics(cloudService, accessToken);\n          setMetricData(data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching metrics:\", error);\n      }\n    };\n    fetchMetrics();\n  }, [cloudService, accessToken]);\n  useEffect(() => {\n    if (metricData && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: metricData.timestamps,\n          datasets: [{\n            label: title,\n            data: metricData.values,\n            borderColor: 'rgba(75,192,192,1)',\n            fill: false\n          }]\n        }\n      });\n    }\n  }, [metricData]);\n  if (!metricData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"metric-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(CloudMetric, \"PBkp9X8YSuE7r1c6w/+r4qUN6G4=\");\n_c = CloudMetric;\nexport default CloudMetric;\nvar _c;\n$RefreshReg$(_c, \"CloudMetric\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chart","getCloudMetrics","loginGoogle","loginAWS","jsxDEV","_jsxDEV","CloudMetric","title","cloudService","_s","metricData","setMetricData","accessToken","setAccessToken","chartRef","fetchMetrics","awsToken","data","error","console","current","ctx","getContext","type","labels","timestamps","datasets","label","values","borderColor","fill","children","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","_c","$RefreshReg$"],"sources":["C:/Users/User/cloud-monitoring-dashboard/frontend/src/CloudMetric.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport { getCloudMetrics, loginGoogle, loginAWS } from './services/api';\r\n\r\nconst CloudMetric = ({ title, cloudService }) => {\r\n  const [metricData, setMetricData] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchMetrics = async () => {\r\n      try {\r\n        if (!accessToken) {\r\n          if (cloudService === 'google') {\r\n            loginGoogle();\r\n          } else if (cloudService === 'aws') {\r\n            const awsToken = await loginAWS('your-username', 'your-password');\r\n            setAccessToken(awsToken);\r\n          }\r\n        } else {\r\n          const data = await getCloudMetrics(cloudService, accessToken);\r\n          setMetricData(data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching metrics:\", error);\r\n      }\r\n    };\r\n    fetchMetrics();\r\n  }, [cloudService, accessToken]);\r\n\r\n  useEffect(() => {\r\n    if (metricData && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n      new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: metricData.timestamps,\r\n          datasets: [\r\n            {\r\n              label: title,\r\n              data: metricData.values,\r\n              borderColor: 'rgba(75,192,192,1)',\r\n              fill: false,\r\n            },\r\n          ],\r\n        },\r\n      });\r\n    }\r\n  }, [metricData]);\r\n\r\n  if (!metricData) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"metric-container\">\r\n      <h3>{title}</h3>\r\n      <canvas ref={chartRef}></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CloudMetric;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,eAAe;AACjC,SAASC,eAAe,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,MAAMC,WAAW,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMiB,QAAQ,GAAGf,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMiB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,IAAI,CAACH,WAAW,EAAE;UAChB,IAAIJ,YAAY,KAAK,QAAQ,EAAE;YAC7BN,WAAW,CAAC,CAAC;UACf,CAAC,MAAM,IAAIM,YAAY,KAAK,KAAK,EAAE;YACjC,MAAMQ,QAAQ,GAAG,MAAMb,QAAQ,CAAC,eAAe,EAAE,eAAe,CAAC;YACjEU,cAAc,CAACG,QAAQ,CAAC;UAC1B;QACF,CAAC,MAAM;UACL,MAAMC,IAAI,GAAG,MAAMhB,eAAe,CAACO,YAAY,EAAEI,WAAW,CAAC;UAC7DD,aAAa,CAACM,IAAI,CAAC;QACrB;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IACDH,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACP,YAAY,EAAEI,WAAW,CAAC,CAAC;EAE/Bd,SAAS,CAAC,MAAM;IACd,IAAIY,UAAU,IAAII,QAAQ,CAACM,OAAO,EAAE;MAClC,MAAMC,GAAG,GAAGP,QAAQ,CAACM,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MAC7C,IAAItB,KAAK,CAACqB,GAAG,EAAE;QACbE,IAAI,EAAE,MAAM;QACZN,IAAI,EAAE;UACJO,MAAM,EAAEd,UAAU,CAACe,UAAU;UAC7BC,QAAQ,EAAE,CACR;YACEC,KAAK,EAAEpB,KAAK;YACZU,IAAI,EAAEP,UAAU,CAACkB,MAAM;YACvBC,WAAW,EAAE,oBAAoB;YACjCC,IAAI,EAAE;UACR,CAAC;QAEL;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACpB,UAAU,CAAC,CAAC;EAEhB,IAAI,CAACA,UAAU,EAAE,oBAAOL,OAAA;IAAA0B,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE7C,oBACE9B,OAAA;IAAK+B,SAAS,EAAC,kBAAkB;IAAAL,QAAA,gBAC/B1B,OAAA;MAAA0B,QAAA,EAAKxB;IAAK;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChB9B,OAAA;MAAQgC,GAAG,EAAEvB;IAAS;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAtDIH,WAAW;AAAAgC,EAAA,GAAXhC,WAAW;AAwDjB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}